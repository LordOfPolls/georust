use std::fmt::Display;
use std::str::FromStr;

#[derive(PartialEq, Debug)]
pub enum Country {
    All,
    AlandIslands,
    Algeria,
    AmericanSamoa,
    Andorra,
    Argentina,
    Australia,
    Austria,
    Azerbaijan,
    Bangladesh,
    Belarus,
    Belgium,
    Bermuda,
    Brazil,
    Bulgaria,
    Canada,
    CanadaFull,
    Chile,
    China,
    Colombia,
    CostaRica,
    Croatia,
    Cyprus,
    Czechia,
    Denmark,
    DominicanRepublic,
    Ecuador,
    Estonia,
    FaroeIslands,
    Finland,
    France,
    FrenchGuiana,
    Germany,
    GreatBritain,
    GreatBritainFull,
    Greenland,
    Guadeloupe,
    Guam,
    Guatemala,
    Guernsey,
    Haiti,
    Hungary,
    Iceland,
    India,
    Ireland,
    IsleOfMan,
    Italy,
    Japan,
    Jersey,
    Latvia,
    Liechtenstein,
    Lithuania,
    Luxembourg,
    Malawi,
    Malaysia,
    Malta,
    MarshallIslands,
    Martinique,
    Mayotte,
    Mexico,
    Micronesia,
    Moldova,
    Monaco,
    Morocco,
    Netherlands,
    NetherlandsFull,
    NewCaledonia,
    NewZealand,
    NorthernMarianaIslands,
    NorthMacedonia,
    Norway,
    Pakistan,
    Palau,
    Panama,
    Peru,
    Philippines,
    Poland,
    Portugal,
    PuertoRico,
    Reunion,
    Romania,
    Russia,
    SaintPierreAndMiquelon,
    SanMarino,
    Serbia,
    Singapore,
    Slovakia,
    Slovenia,
    SouthAfrica,
    SouthKorea,
    Spain,
    SriLanka,
    SvalbardAndJanMayen,
    Sweden,
    Switzerland,
    Thailand,
    Turkey,
    Ukraine,
    UnitedKingdom,
    UnitedKingdomFull,
    UnitedStates,
    Uruguay,
    VaticanCity,
    VirginIslandsUS,
    WallisAndFutuna,
}

impl Display for Country {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Country::UnitedKingdomFull => write!(f, "GB_full"),
            Country::GreatBritainFull => write!(f, "GB_full"),
            Country::CanadaFull => write!(f, "CA_full"),
            Country::NetherlandsFull => write!(f, "NL_full"),
            Country::Andorra => write!(f, "AD"),
            Country::Argentina => write!(f, "AR"),
            Country::AmericanSamoa => write!(f, "AS"),
            Country::Austria => write!(f, "AT"),
            Country::Australia => write!(f, "AU"),
            Country::AlandIslands => write!(f, "AX"),
            Country::Azerbaijan => write!(f, "AZ"),
            Country::Bangladesh => write!(f, "BD"),
            Country::Belgium => write!(f, "BE"),
            Country::Bulgaria => write!(f, "BG"),
            Country::Bermuda => write!(f, "BM"),
            Country::Brazil => write!(f, "BR"),
            Country::Belarus => write!(f, "BY"),
            Country::Canada => write!(f, "CA"),
            Country::Switzerland => write!(f, "CH"),
            Country::Chile => write!(f, "CL"),
            Country::China => write!(f, "CN"),
            Country::Colombia => write!(f, "CO"),
            Country::CostaRica => write!(f, "CR"),
            Country::Cyprus => write!(f, "CY"),
            Country::Czechia => write!(f, "CZ"),
            Country::Germany => write!(f, "DE"),
            Country::Denmark => write!(f, "DK"),
            Country::DominicanRepublic => write!(f, "DO"),
            Country::Algeria => write!(f, "DZ"),
            Country::Ecuador => write!(f, "EC"),
            Country::Estonia => write!(f, "EE"),
            Country::Spain => write!(f, "ES"),
            Country::Finland => write!(f, "FI"),
            Country::Micronesia => write!(f, "FM"),
            Country::FaroeIslands => write!(f, "FO"),
            Country::France => write!(f, "FR"),
            Country::UnitedKingdom => write!(f, "GB"),
            Country::GreatBritain => write!(f, "GB"),
            Country::FrenchGuiana => write!(f, "GF"),
            Country::Guernsey => write!(f, "GG"),
            Country::Greenland => write!(f, "GL"),
            Country::Guadeloupe => write!(f, "GP"),
            Country::Guatemala => write!(f, "GT"),
            Country::Guam => write!(f, "GU"),
            Country::Croatia => write!(f, "HR"),
            Country::Haiti => write!(f, "HT"),
            Country::Hungary => write!(f, "HU"),
            Country::Ireland => write!(f, "IE"),
            Country::IsleOfMan => write!(f, "IM"),
            Country::India => write!(f, "IN"),
            Country::Iceland => write!(f, "IS"),
            Country::Italy => write!(f, "IT"),
            Country::Jersey => write!(f, "JE"),
            Country::Japan => write!(f, "JP"),
            Country::SouthKorea => write!(f, "KR"),
            Country::Liechtenstein => write!(f, "LI"),
            Country::SriLanka => write!(f, "LK"),
            Country::Lithuania => write!(f, "LT"),
            Country::Luxembourg => write!(f, "LU"),
            Country::Latvia => write!(f, "LV"),
            Country::Morocco => write!(f, "MA"),
            Country::Monaco => write!(f, "MC"),
            Country::Moldova => write!(f, "MD"),
            Country::MarshallIslands => write!(f, "MH"),
            Country::NorthMacedonia => write!(f, "MK"),
            Country::NorthernMarianaIslands => write!(f, "MP"),
            Country::Martinique => write!(f, "MQ"),
            Country::Malta => write!(f, "MT"),
            Country::Malawi => write!(f, "MW"),
            Country::Mexico => write!(f, "MX"),
            Country::Malaysia => write!(f, "MY"),
            Country::NewCaledonia => write!(f, "NC"),
            Country::Netherlands => write!(f, "NL"),
            Country::Norway => write!(f, "NO"),
            Country::NewZealand => write!(f, "NZ"),
            Country::Panama => write!(f, "PA"),
            Country::Peru => write!(f, "PE"),
            Country::Philippines => write!(f, "PH"),
            Country::Pakistan => write!(f, "PK"),
            Country::Poland => write!(f, "PL"),
            Country::SaintPierreAndMiquelon => write!(f, "PM"),
            Country::PuertoRico => write!(f, "PR"),
            Country::Portugal => write!(f, "PT"),
            Country::Palau => write!(f, "PW"),
            Country::Reunion => write!(f, "RE"),
            Country::Romania => write!(f, "RO"),
            Country::Serbia => write!(f, "RS"),
            Country::Russia => write!(f, "RU"),
            Country::Sweden => write!(f, "SE"),
            Country::Singapore => write!(f, "SG"),
            Country::Slovenia => write!(f, "SI"),
            Country::SvalbardAndJanMayen => write!(f, "SJ"),
            Country::Slovakia => write!(f, "SK"),
            Country::SanMarino => write!(f, "SM"),
            Country::Thailand => write!(f, "TH"),
            Country::Turkey => write!(f, "TR"),
            Country::Ukraine => write!(f, "UA"),
            Country::UnitedStates => write!(f, "US"),
            Country::Uruguay => write!(f, "UY"),
            Country::VaticanCity => write!(f, "VA"),
            Country::VirginIslandsUS => write!(f, "VI"),
            Country::WallisAndFutuna => write!(f, "WF"),
            Country::Mayotte => write!(f, "YT"),
            Country::SouthAfrica => write!(f, "ZA"),
            Country::All => write!(f, "allCountries"),
        }
    }
}

impl FromStr for Country {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let s = s.to_uppercase();
        match s.as_str() {
            "AD" => Ok(Country::Andorra),
            "AR" => Ok(Country::Argentina),
            "AS" => Ok(Country::AmericanSamoa),
            "AT" => Ok(Country::Austria),
            "AU" => Ok(Country::Australia),
            "AX" => Ok(Country::AlandIslands),
            "AZ" => Ok(Country::Azerbaijan),
            "BD" => Ok(Country::Bangladesh),
            "BE" => Ok(Country::Belgium),
            "BG" => Ok(Country::Bulgaria),
            "BM" => Ok(Country::Bermuda),
            "BR" => Ok(Country::Brazil),
            "BY" => Ok(Country::Belarus),
            "CA" => Ok(Country::Canada),
            "CH" => Ok(Country::Switzerland),
            "CL" => Ok(Country::Chile),
            "CN" => Ok(Country::China),
            "CO" => Ok(Country::Colombia),
            "CR" => Ok(Country::CostaRica),
            "CY" => Ok(Country::Cyprus),
            "CZ" => Ok(Country::Czechia),
            "DE" => Ok(Country::Germany),
            "DK" => Ok(Country::Denmark),
            "DO" => Ok(Country::DominicanRepublic),
            "DZ" => Ok(Country::Algeria),
            "EC" => Ok(Country::Ecuador),
            "EE" => Ok(Country::Estonia),
            "ES" => Ok(Country::Spain),
            "FI" => Ok(Country::Finland),
            "FM" => Ok(Country::Micronesia),
            "FO" => Ok(Country::FaroeIslands),
            "FR" => Ok(Country::France),
            "GB" => Ok(Country::UnitedKingdom),
            "GF" => Ok(Country::FrenchGuiana),
            "GG" => Ok(Country::Guernsey),
            "GL" => Ok(Country::Greenland),
            "GP" => Ok(Country::Guadeloupe),
            "GT" => Ok(Country::Guatemala),
            "GU" => Ok(Country::Guam),
            "HR" => Ok(Country::Croatia),
            "HT" => Ok(Country::Haiti),
            "HU" => Ok(Country::Hungary),
            "IE" => Ok(Country::Ireland),
            "IM" => Ok(Country::IsleOfMan),
            "IN" => Ok(Country::India),
            "IS" => Ok(Country::Iceland),
            "IT" => Ok(Country::Italy),
            "JE" => Ok(Country::Jersey),
            "JP" => Ok(Country::Japan),
            "KR" => Ok(Country::SouthKorea),
            "LI" => Ok(Country::Liechtenstein),
            "LK" => Ok(Country::SriLanka),
            "LT" => Ok(Country::Lithuania),
            "LU" => Ok(Country::Luxembourg),
            "LV" => Ok(Country::Latvia),
            "MA" => Ok(Country::Morocco),
            "MC" => Ok(Country::Monaco),
            "MD" => Ok(Country::Moldova),
            "MH" => Ok(Country::MarshallIslands),
            "MK" => Ok(Country::NorthMacedonia),
            "MP" => Ok(Country::NorthernMarianaIslands),
            "MQ" => Ok(Country::Martinique),
            "MT" => Ok(Country::Malta),
            "MW" => Ok(Country::Malawi),
            "MX" => Ok(Country::Mexico),
            "MY" => Ok(Country::Malaysia),
            "NC" => Ok(Country::NewCaledonia),
            "NL" => Ok(Country::Netherlands),
            "NO" => Ok(Country::Norway),
            "NZ" => Ok(Country::NewZealand),
            "PA" => Ok(Country::Panama),
            "PE" => Ok(Country::Peru),
            "PH" => Ok(Country::Philippines),
            "PK" => Ok(Country::Pakistan),
            "PL" => Ok(Country::Poland),
            "PM" => Ok(Country::SaintPierreAndMiquelon),
            "PR" => Ok(Country::PuertoRico),
            "PT" => Ok(Country::Portugal),
            "PW" => Ok(Country::Palau),
            "RE" => Ok(Country::Reunion),
            "RO" => Ok(Country::Romania),
            "RS" => Ok(Country::Serbia),
            "RU" => Ok(Country::Russia),
            "SE" => Ok(Country::Sweden),
            "SG" => Ok(Country::Singapore),
            "SI" => Ok(Country::Slovenia),
            "SJ" => Ok(Country::SvalbardAndJanMayen),
            "SK" => Ok(Country::Slovakia),
            "SM" => Ok(Country::SanMarino),
            "TH" => Ok(Country::Thailand),
            "TR" => Ok(Country::Turkey),
            "UA" => Ok(Country::Ukraine),
            "US" => Ok(Country::UnitedStates),
            "UY" => Ok(Country::Uruguay),
            "VA" => Ok(Country::VaticanCity),
            "VI" => Ok(Country::VirginIslandsUS),
            "WF" => Ok(Country::WallisAndFutuna),
            "YT" => Ok(Country::Mayotte),
            "ZA" => Ok(Country::SouthAfrica),
            _ => Err(format!("Unknown country code: {}", s)),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_from_str() {
        let country = Country::from_str("US");
        assert_eq!(country, Ok(Country::UnitedStates));
    }

    #[test]
    fn test_to_string() {
        let country = Country::UnitedStates;
        assert_eq!(country.to_string(), "US");
    }
}
